10.6 453 Constructing such a list may be a tedious and unrewarding task, especially if we do not know in advance the list of users in the system. The directory entry, previously of fixed size, now must be of variable size, resulting in more complicated space management. These problems can be resolved by use of a condensed version of the access list. To condense the length of the access-control list, many systems recognize three classifications of users in connection with each file: Owner. The user who created the file is the owner. Group. A set of users who are sharing the file and need similar access is a group, or work group. Universe. All other users in the system constitute the universe. The most common recent approach is to combine access-control lists with the more general (and easier to implement) owner, group, and universe control scheme just described. For example, Solaris 2.6 and beyond use the three categories of access by default but allow access-control lists to be added to specific files and directories when more fine-grained access control is desired. To illustrate, consider a person, Sara, who is writing a new book. She has hired three graduate students (Jim, Dawn, and Jill) to help with the project. The text of the book is kept in a file named book. The protection associated with this file is as follows: Sara should be able to invoke all operations on the file. Jim, Dawn, and Jill should be able only to read and write the file; they should not be allowed to delete the file. All other users should be able to read, but not write, the file. (Sara is interested in letting as many people as possible read the text so that she can obtain feedback.) To achieve such protection, we must create a new group-say, with members Jim, Dawn, and Jill. The name of the group, text, must then be associated with the file book, and the access rights must be set in accordance with the policy we have outlined. Now consider a visitor to whom Sara would like to grant temporary access to Chapter 1. The visitor cannot be added to the text group because that would give him access to all chapters. Because a file can only be in one group, Sara cannot add another group to Chapter 1. \Nith the addition of access-control-list functionality, though, the visitor can be added to the access control list of Chapter 1. For this scheme to work properly, permissions and access lists must be controlled tightly. This control can be accomplished in several ways. For example, in the UNIX system, groups can be created and modified only by the manager of the facility (or by any superuser). Thus, control is achieved through human interaction. In the VMS system, the owner of the file can create 454 Chapter 10 and modify the access-control list. Access lists are discussed further in Section 14.5.2. With the more limited protection classification, only three fields are needed to define protection. Often, each field is a collection of bits, and each bit either allows or prevents the access associated with it. For example, the UNIX system defines three fields of 3 bits each -rwx, where r controls read access, w controls write access, and x controls execution. A separate field is kept for the file owner, for the file's group, and for all other users. In this scheme, 9 bits per file are needed to record protection information. Thus, for our example, the protection fields for the file book are as follows: for the owner Sara, all bits are set; for the group text, the rand w bits are set; and for the universe, only the r bit is set. One difficulty in combining approaches comes in the user interface. Users must be able to tell when the optional ACL permissions are set on a file. In the Solaris example, a"+" appends the regular permissions, as in: f1l S'/STEtvl (Ji Users (PBG-LA.PTOF\Users) Permissions for Gue:;t Full Contml F;_e a.d g Execute R.ead 'vi/rite Spec:ia.l Permissions A.llo·w For specia.l permissions orfor advanced settings. click .A.dva.nced. .A.dva.nced Figure 10.15 Windows XP access-control list management. 10.6 453 Constructing such a list may be a tedious and unrewarding task, especially if we do not know in advance the list of users in the system. The directory entry, previously of fixed size, now must be of variable size, resulting in more complicated space management. These problems can be resolved by use of a condensed version of the access list. To condense the length of the access-control list, many systems recognize three classifications of users in connection with each file: Owner. The user who created the file is the owner. Group. A set of users who are sharing the file and need similar access is a group, or work group. Universe. All other users in the system constitute the universe. The most common recent approach is to combine access-control lists with the more general (and easier to implement) owner, group, and universe control scheme just described. For example, Solaris 2.6 and beyond use the three categories of access by default but allow access-control lists to be added to specific files and directories when more fine-grained access control is desired. To illustrate, consider a person, Sara, who is writing a new book. She has hired three graduate students (Jim, Dawn, and Jill) to help with the project. The text of the book is kept in a file named book. The protection associated with this file is as follows: Sara should be able to invoke all operations on the file. Jim, Dawn, and Jill should be able only to read and write the file; they should not be allowed to delete the file. All other users should be able to read, but not write, the file. (Sara is interested in letting as many people as possible read the text so that she can obtain feedback.) To achieve such protection, we must create a new group-say, with members Jim, Dawn, and Jill. The name of the group, text, must then be associated with the file book, and the access rights must be set in accordance with the policy we have outlined. Now consider a visitor to whom Sara would like to grant temporary access to Chapter 1. The visitor cannot be added to the text group because that would give him access to all chapters. Because a file can only be in one group, Sara cannot add another group to Chapter 1. \Nith the addition of access-control-list functionality, though, the visitor can be added to the access control list of Chapter 1. For this scheme to work properly, permissions and access lists must be controlled tightly. This control can be accomplished in several ways. For example, in the UNIX system, groups can be created and modified only by the manager of the facility (or by any superuser). Thus, control is achieved through human interaction. In the VMS system, the owner of the file can create 
454 Chapter 10 and modify the access-control list. Access lists are discussed further in Section 14.5.2. With the more limited protection classification, only three fields are needed to define protection. Often, each field is a collection of bits, and each bit either allows or prevents the access associated with it. For example, the UNIX system defines three fields of 3 bits each -rwx, where r controls read access, w controls write access, and x controls execution. A separate field is kept for the file owner, for the file's group, and for all other users. In this scheme, 9 bits per file are needed to record protection information. Thus, for our example, the protection fields for the file book are as follows: for the owner Sara, all bits are set; for the group text, the rand w bits are set; and for the universe, only the r bit is set. One difficulty in combining approaches comes in the user interface. Users must be able to tell when the optional ACL permissions are set on a file. In the Solaris example, a"+" appends the regular permissions, as in: f1l S'/STEtvl (Ji Users (PBG-LA.PTOF\Users) Permissions for Gue:;t Full Contml F;_e a.d g Execute R.ead 'vi/rite Spec:ia.l Permissions A.llo·w For specia.l permissions orfor advanced settings. click .A.dva.nced. .A.dva.nced Figure 10.15 Windows XP access-control list management. 
10.6 455 19 -rw-r--r--+ 1 jim staff 130 May 25 22:13 file1 A separate set of commands, setfacl and getfacl, is used to manage the ACLs. Windows XP users typically manage access-control lists via the CUI. Figure 10.15 shows a file-permission window on Windows XP's NTFS file system. In this example, user "guest" is specifically denied access to the file lO.tex. Another difficulty is assigning precedence when permission and ACLs conflict. For example, if Joe is in a file's group, which has read permission, but the file has an ACL granting Joe read and write permission, should a write by Joe be granted or denied? Solaris gives ACLs precedence (as they are more fine-grained and are not assigned by default). This follows the general rule that specificity should have priority. 10.6.3 Other Protection Approaches Another approach to the protection problem is to associate a password with each file. Just as access to the computer system is often controlled by a password, access to each file can be controlled in the same way. If the passwords are chosen randomly and changed often, this scheme may be effective in limiting access to a file. The use of passwords has a few disadvantages, however. First, the number of passwords that a user needs to remember may PERMISSIONS IN A UNIX SYSTEM In the UNIX system, directory protection and file protection are handled similarly. Associated with each subdirectory are three fields-owner, group, and universe-each consisting of the three bits rwx. Thus, a user can list the content of a subdirectory only if the r bit is set in the appropriate field. Similarly, a user can change his current directory to another current directory (say, faa) only if the x bit associated with the faa subdirectory is set in the appropriate field. A sample directory listing from a UNIX environment is shown in Figure 10.16. The first field describes the protecti.on of the file or directory. Ad as the first character indicates a s11bdirectory. Also shown are the number of links to the file, the owner's name, the group's name, the size of the file in bytes, the date of last modification, and finally the file's name (with optional extension). -rw-rw-r--l pbg staff 31200 Sep 30l:UO intro.ps drwx------5 pbg staff 512 Jul 8 09.33 private/ drwxrwxr-x 2 pbg staff 512 Jul8 09:35 doc/ drwxrwx---2 pbg student 512 Aug 3 14:13 student-proj/ -rw-r--r--1 pbg staff 9423 Feb 24 2003 program.c -rwxr-xr-x l pbg staff 20471 ·Feb 24 2003 program 4 pbg faculty 512 Jul 31 10:31 lib/ drwx------3 pbg staff 1024 Aug 29 06:52 mail/ drwxrwxrwx 3 pbg staff 512 Jul 8 09:35 test/ Figure 10.16 A sample directory listing. 
